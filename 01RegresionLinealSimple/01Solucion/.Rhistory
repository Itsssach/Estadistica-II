# --------------------------
# Obtención de 500 regresiones
auxiliar <- apply(X, 1, simulacion) # Aplicación simulación
# Obtención parámetros estimados de las rectas ajustadas
betas <- sapply(auxiliar, coef) # Obteniendo coeficientes
betas_0 <- betas[1, ] # Extracción
betas_1 <- betas[2, ] # Extracción
# Obtención respuestas estimadas en cada muestra simulada
y_hats <- sapply(auxiliar, fitted) # Valores ajustados
# Obtención residuos en cada muestra simulada
residual <- sapply(auxiliar, residuals) # Extracción
# Obtención del MSE y SSE en cada muestra simulada
mses <- apply(residual, 2, MSE)
sses <- apply(residual, 2, SSE)
# --------------------------
#  Simulación y modelación
# --------------------------
# Obtención de sumas de cuadrados corregidos en X
Sxx <- function(x){
n <- length(x) # Longitud
x_bar <- mean(x) # Media
sxx <- sum((x- x_bar)^2) # Suma de cuadrados
return(sxx) # Valor de retorno
} # Finalización función
# Obtención Sxx para cada muestra simulada
sxx_values <- apply(X, 1, Sxx) # Generación
# Véase que la suma de cuadrados corregidos es la misma siempre
sxx <- sxx_values[[1]] # Valor específico
desviacion <- sqrt(mses/sxx) # Desviación
# --------------------------
#  Intervalos de confianza
# --------------------------
# Valor crítico con alpha= 0.1 y 17 grados de libertad
valor_critico_t <- qt(0.95, df= 17) # Cálculo
radio <- valor_critico_t*desviacion # Precisión intervalo
results <- matrix(NA, nrow= 500, ncol= 2) # Matriz vacía para el almacenamiento
# Generación de los intervalos de confianza
for (i in 1:500){
lower_ci <- betas_1[i]- radio[i] # Inferior
upper_ci <- betas_1[i]+ radio[i] # Superior
results[i, ] <- c(lower_ci, upper_ci) # Asignación
} # Término del ciclo
# Contar cuántos intervalos incluyen el valor 10
inside_interval <- sum(10 >= results[, 1] & 10 <= results[, 2])
# --------------------------
#       Tabla de datos
# --------------------------
betas <- t(betas) # Transpuesta
betas_table <- rbind(head(betas, 5), c(rep(".", 2)), c(rep(".", 2)), c(rep(".", 2)), tail(betas, 5)) # Tabla información
# Aplicar formato a la tabla
betas_table |> # Tabla de datos
knitr::kable(booktabs= TRUE, caption= "Valores estimados simulados",
align= 'c') |>
kableExtra::kable_styling(full_width = TRUE,
latex_options = "HOLD_position",
font_size = 10) |>
kableExtra::column_spec(1, bold = TRUE)
# --------------------------
#    Creación histogramas
# --------------------------
ggplot(as.data.frame(betas_0), aes(betas_0)) +
geom_histogram(aes(y= after_stat(density)), fill= "lightgray",
color= "black", binwidth= 0.8) +
geom_density(color= "red", lwd= 1, fill= "red", alpha= 0.5) +
labs(title= "Histograma de densidad", x= "Valor estimaciones",
y= "Densidad", subtitle= "En relación a las simulaciones" ) + theme_gdocs() +
theme(plot.title= element_text(color= "black", size= 15, face= "bold"),
axis.title.x= element_text(color= "black", size= 12, face= "bold"),
axis.title.y= element_text(color= "black", size= 12, face= "bold"),
plot.subtitle= element_text(color= "gray", size= 12, face= "bold.italic"),
axis.text.x= element_text(size= 8),
axis.text.y= element_text(size= 8)) +
scale_color_brewer(palette= "Dark2") + guides(size= none, alpha= none)
# --------------------------
#    Creación histogramas
# --------------------------
ggplot(as.data.frame(betas_1), aes(betas_1)) +
geom_histogram(aes(y= after_stat(density)), fill= "lightgray",
color= "black", binwidth= 0.1) +
geom_density(color= "red", lwd= 1, fill= "red", alpha= 0.5) +
labs(title= "Histograma de densidad", x= "Valor estimaciones",
y= "Densidad", subtitle= "En relación a las simulaciones" ) + theme_gdocs() +
theme(plot.title= element_text(color= "black", size= 15, face= "bold"),
axis.title.x= element_text(color= "black", size= 12, face= "bold"),
axis.title.y= element_text(color= "black", size= 12, face= "bold"),
plot.subtitle= element_text(color= "gray", size= 12, face= "bold.italic"),
axis.text.x= element_text(size= 8),
axis.text.y= element_text(size= 8)) +
scale_color_brewer(palette= "Dark2") + guides(size= none, alpha= none)
# --------------------------
#       Tabla de datos
# --------------------------
colnames(results) <- c("Límite inferior", "Límite superior") # Nombres
results_table <- rbind(head(results, 5), c(rep(".", 2)), c(rep(".", 2)), c(rep(".", 2)), tail(results, 5)) # Tabla información
results_table |> # Tabla de datos
knitr::kable(booktabs= TRUE, caption= "Intervalos de confianza",
align= 'c') |>
kableExtra::kable_styling(full_width = FALSE, latex_options = "HOLD_position", font_size = 10) # Personalización
# --------------------------
#    Creación histogramas
# --------------------------
ggplot(as.data.frame(betas_1), aes(betas_1)) +
geom_histogram(aes(y= after_stat(density)), fill= "lightgray",
color= "black", binwidth= 0.1) +
geom_density(color= "red", lwd= 1, fill= "red", alpha= 0.5) +
labs(title= expression(paste("Histograma densidad", hat(beta))),
x= "Valor estimaciones",
y= "Densidad", subtitle= "En relación a las simulaciones" ) + theme_gdocs() +
theme(plot.title= element_text(color= "black", size= 15, face= "bold"),
axis.title.x= element_text(color= "black", size= 12, face= "bold"),
axis.title.y= element_text(color= "black", size= 12, face= "bold"),
plot.subtitle= element_text(color= "gray", size= 12, face= "bold.italic"),
axis.text.x= element_text(size= 8),
axis.text.y= element_text(size= 8)) +
scale_color_brewer(palette= "Dark2") + guides(size= none, alpha= none)
# --------------------------
#    Creación histogramas
# --------------------------
ggplot(as.data.frame(betas_1), aes(betas_1)) +
geom_histogram(aes(y= after_stat(density)), fill= "lightgray",
color= "black", binwidth= 0.1) +
geom_density(color= "red", lwd= 1, fill= "red", alpha= 0.5) +
labs(title= expression(paste("Histograma densidad ", hat(beta))),
x= "Valor estimaciones",
y= "Densidad", subtitle= "En relación a las simulaciones" ) + theme_gdocs() +
theme(plot.title= element_text(color= "black", size= 15, face= "bold"),
axis.title.x= element_text(color= "black", size= 12, face= "bold"),
axis.title.y= element_text(color= "black", size= 12, face= "bold"),
plot.subtitle= element_text(color= "gray", size= 12, face= "bold.italic"),
axis.text.x= element_text(size= 8),
axis.text.y= element_text(size= 8)) +
scale_color_brewer(palette= "Dark2") + guides(size= none, alpha= none)
# --------------------------
#    Creación histogramas
# --------------------------
ggplot(as.data.frame(betas_1), aes(betas_1)) +
geom_histogram(aes(y= after_stat(density)), fill= "lightgray",
color= "black", binwidth= 0.1) +
geom_density(color= "red", lwd= 1, fill= "red", alpha= 0.5) +
labs(title= expression(paste("Histograma densidad ", hat(beta[1]))),
x= expression(paste("Valor estimaciones ", hat(beta[1]))),
y= "Densidad", subtitle= "En relación a las simulaciones" ) + theme_gdocs() +
theme(plot.title= element_text(color= "black", size= 15, face= "bold"),
axis.title.x= element_text(color= "black", size= 12, face= "bold"),
axis.title.y= element_text(color= "black", size= 12, face= "bold"),
plot.subtitle= element_text(color= "gray", size= 12, face= "bold.italic"),
axis.text.x= element_text(size= 8),
axis.text.y= element_text(size= 8)) +
scale_color_brewer(palette= "Dark2") + guides(size= none, alpha= none)
# --------------------------
#    Creación histogramas
# --------------------------
ggplot(as.data.frame(betas_0), aes(betas_0)) +
geom_histogram(aes(y= after_stat(density)), fill= "lightgray",
color= "black", binwidth= 0.8) +
geom_density(color= "red", lwd= 1, fill= "red", alpha= 0.5) +
labs(title= expression(paste("Histograma de densidad ", hat(beta[0]))),
x= expression(paste("Valor estimaciones ", hat(beta[0]))),
y= "Densidad", subtitle= "En relación a las simulaciones" ) + theme_gdocs() +
theme(plot.title= element_text(color= "black", size= 15, face= "bold"),
axis.title.x= element_text(color= "black", size= 12, face= "bold"),
axis.title.y= element_text(color= "black", size= 12, face= "bold"),
plot.subtitle= element_text(color= "gray", size= 12, face= "bold.italic"),
axis.text.x= element_text(size= 8),
axis.text.y= element_text(size= 8)) +
scale_color_brewer(palette= "Dark2") + guides(size= none, alpha= none)
# -----------------------------
if (!dir.exists("figs")) dir.create("figs")
if (!dir.exists("_cache")) dir.create("_cache")
# -----------------------------
knitr::opts_chunk$set(cache=TRUE,
message=FALSE, warning=FALSE,
fig.path='figs/',
cache.path = '_cache/',
out.width = "80%",
fig.align = "center")
# -----------------------------
# fig.process = function(x) {x2 = sub('-\\d+([.][a-z]+)$', '\\1', x) if (file.rename(x, x2)) x2 else x}
# -----------------------------
#           Librerías
# -----------------------------
if(!require(pacman)){install.packages("pacman"); library(pacman)}
pacman::p_load("tidyverse", "knitr", "leaps","tidyr",
"exams","leaps","MASS","rsm","car","magrittr","readxl",
"kableExtra", "ggthemes", "GGally", "corrplot")
# -----------------------------
#      Lectura información
# -----------------------------
data <- read.csv("data/FreedomIndex.csv") |>
tidyr::drop_na() |>
dplyr::select(3:15) |>
dplyr::rename(OS = Overall.Score, PR = Property.Rights,
GI = Government.Integrity, JE = Judicial.Effectiveness,
TB = Tax.Burden, GS = Government.Spending,
FH = Fiscal.Health, BF = Business.Freedom,
LF = Labor.Freedom, MF = Monetary.Freedom,
TF = Trade.Freedom, IF = Investment.Freedom,
FF = Financial.Freedom)
# -----------------------------
old_names <- data.frame(old = c("Overall.Score", "Property.Rights", "Government.Integrity", "Judicial.Effectiveness", "Tax.Burden", "Government.Spending", "Fiscal.Health", "Business.Freedom", "Labor.Freedom", "Monetary.Freedom", "Trade.Freedom", "Investment.Freedom", "Financial.Freedom"), new = c("OS", "PR", "GI", "JE", "TB", "GS", "FH", "BF", "LF", "MF", "TF", "IF", "FF"))
table <- head(data, 5)
table |>
knitr::kable(booktabs= TRUE,
caption= "Información en análisis",
align= "c") |> # Kable Table
kableExtra::kable_styling(full_width= TRUE, latex_options=
"HOLD_position", font_size= 10) |>
kableExtra::column_spec(1, bold = TRUE) # Boldness
# -----------------------------
#     Análisis descriptivo
# -----------------------------
cor_matriz <- cor(data) |>
reshape2::melt() # Formato largo
# -----------------------------
correlation_plot <- ggplot(cor_matriz, aes(Var1, Var2, fill= value)) +
geom_tile(color= "blue") +
scale_fill_gradient2(low= "blue", high= "red",
midpoint= 0, limit= c(-1, 1), space= "Lab",
name= "Correlacion") +
geom_text(aes(label = round(value, 2)), color = "black", size = 3) +
# coord_fixed() +
labs(title= "Matriz de correlaciones", x= "",
y= "", subtitle= "En relacion al problema" )
# --------------------------
#  Personalización (opcional)
# --------------------------
# GGthemes::theme_gdocs()
correlation_plot <- correlation_plot +  theme_gdocs() +
theme(plot.title= element_text(color= "black", size= 15, face= "bold"),
axis.title.x= element_text(color= "black", size= 12, face= "bold"),
axis.title.y= element_text(color= "black", size= 12, face= "bold"),
plot.subtitle= element_text(color= "gray", size= 12, face= "bold.italic"),
axis.text.x= element_text(size= 8, angle= 90, hjust= 1),
axis.text.y= element_text(size= 8)) +
scale_color_brewer(palette= "Dark2") + guides(size= none, alpha= none)
# --------------------------
correlation_plot # Imprimir resultado
# -----------------------------
#    Gráfico de correlación
# -----------------------------
highly_correlated <- data |>
dplyr::select(-TB, -GS, -FH, -MF)
GGally::ggpairs(highly_correlated, title = "Gráfico de correlación")
# -----------------------------
#    Gráfico de densidad (OS)
# -----------------------------
density_plot <- ggplot(data, aes(OS)) +
geom_histogram(aes(y= after_stat(density)), fill= "lightgray",
color= "black", position= "identity") +
geom_density(color= "red", lwd= 1, fill= "red", alpha= 0.5) +
labs(title= "Histograma de densidad", x= "Observaciones",
y= "Densidad", subtitle= "En relación a Overall Score" )
# --------------------------
#  Personalización (opcional)
# --------------------------
# GGthemes::theme_gdocs()
density_plot <- density_plot + theme_gdocs() +
theme(plot.title= element_text(color= "black", size= 15, face= "bold"),
axis.title.x= element_text(color= "black", size= 12, face= "bold"),
axis.title.y= element_text(color= "black", size= 12, face= "bold"),
plot.subtitle= element_text(color= "gray", size= 12, face= "bold.italic"),
axis.text.x= element_text(size= 8),
axis.text.y= element_text(size= 8)) +
scale_color_brewer(palette= "Dark2") + guides(size= none, alpha= none)
# --------------------------
density_plot # Imprimir resultado
# -----------------------------
#         Density plot
# -----------------------------
# plot(density(data$OS), main = expression(paste("Gráfico de ", y)))
# -----------------------------
#      Modelo de regresión
# -----------------------------
model <- stats::lm(OS ~ GI, data = data)
# Ajustando el modelo de regresión
# Encontrar la información
beta_0 <- coef(model)[1] # Beta_0
# Same as model$coefficients[1]
beta_1 <- coef(model)[2] # Beta_1
y_bar <- mean(data$OS) # Mean Y
y_hat <- fitted(model) # Ajustados
residuals <-model$residuals
sigma_2 <- sigma(model)^2 # Sigma^2
# -----------------------------
# Hallando los valores a mano
x <- data$GI; y <- data$OS; n <- length(data)
x_bar <- mean(x); y_bar <- mean(y)
Sxx <- sum((x- x_bar)^2); Sxy <- sum((x- x_bar)*y)
beta_1 <- Sxy/Sxx # Beta_0
beta_0 <- y_bar - (beta_1 * x_bar) # Beta_1
residuals <- y - y_hat # Residuales
sigma_2 <- sum(residuals^2)/(n -2)
# -----------------------------
# --------------------------
#    Gráfico de regresión
# --------------------------
regression <- ggplot(data, aes(x = GI, y = OS)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE,color = "red") +
labs(title = "Gráfico de Regresión", x = "GI", y = "GI",
subtitle= "En relación al problema" )
# --------------------------
#  Personalización (opcional)
# --------------------------
# GGthemes::theme_gdocs()
regression <- regression + theme_gdocs() +
theme(plot.title= element_text(color= "black", size= 15, face= "bold"),
axis.title.x= element_text(color= "black", size= 12, face= "bold"),
axis.title.y= element_text(color= "black", size= 12, face= "bold"),
plot.subtitle= element_text(color= "gray", size= 12, face= "bold.italic"),
axis.text.x= element_text(size= 8),
axis.text.y= element_text(size= 8)) +
scale_color_brewer(palette= "Dark2") + guides(size= none, alpha= none)
# --------------------------
regression # Imprimir resultado
# --------------------------
#         Parámetros
# --------------------------
model_summary <- summary(model)
# --------------------------
#            Tabla
# --------------------------
# Generar tabla con kable
model_summary$coefficients |>
knitr::kable(booktabs= TRUE,
caption= "Significancia parámetros (Prueba t)",
align= "c") |> # Kable Table
kableExtra::kable_styling(full_width= TRUE, latex_options=
"HOLD_position", font_size= 10) |>
kableExtra::column_spec(1, bold = TRUE) # Boldness
# --------------------------
#   Intervalo de confianza
# --------------------------
confint_beta0 <- confint(model, "(Intercept)", level = 0.95)
confint_beta1 <- confint(model, "GI", level = 0.95)
# --------------------------
alpha <- 0.05 # Nivel de significancia
beta0_lower <- beta_0 - qt(1 - alpha/2, n- 2)*sqrt(sigma_2*sum(x^2)/(n*Sxx))
beta_0_upper <- beta_0 + qt(1 - alpha/2, n-2)*sqrt(sigma_2*sum(x^2)/(n*Sxx))
# --------------------------
beta1_lower <- beta_1 - qt(1- alpha/2, n-2)*sqrt(sigma_2/Sxx)
beta1_upper <- beta_1 + qt(1- alpha/2, n-2)*sqrt(sigma_2/Sxx)
# --------------------------
#     Generación datos
# --------------------------
x <- seq(1, 10, by= 0.5) # Generación datos
sigma2 <- 16 # Indicado en el modelo
nsim <- 500 # Número de simulaciones
X <- matrix(rep(x, times= nsim), byrow= TRUE, nrow= nsim) # Generación matriz
# --------------------------
#  Simulación y modelación
# --------------------------
# Función para la estimación del modelo
simulacion <- function(x){
n <- length(x) # Longitud del vector
y <- 50+ 10*x+ rnorm(n, mean= 0, sd= 4) # Modelo lineal
modelo <- lm(y ~ x) # Ajuste del modelo
return(modelo) # Retorno de la función
} # Finalización función
# Función para el cálculo del (MSE)
MSE <- function(residual){
mse <- sum(residual^2)/(length(residual)- 2) # Definición MSE
return(mse) # Valor de retorno
} # Finalización función
# Función para el cálculo del SSE
SSE <- function(residual){
sse <- sum(residual^2) # Definición SSE
return(sse) # Valor de retorno
} # Finalización función
# --------------------------
#  Simulación y modelación
# --------------------------
# Obtención de 500 regresiones
auxiliar <- apply(X, 1, simulacion) # Aplicación simulación
# Obtención parámetros estimados de las rectas ajustadas
betas <- sapply(auxiliar, coef) # Obteniendo coeficientes
betas_0 <- betas[1, ] # Extracción
betas_1 <- betas[2, ] # Extracción
# Obtención respuestas estimadas en cada muestra simulada
y_hats <- sapply(auxiliar, fitted) # Valores ajustados
# Obtención residuos en cada muestra simulada
residual <- sapply(auxiliar, residuals) # Extracción
# Obtención del MSE y SSE en cada muestra simulada
mses <- apply(residual, 2, MSE)
sses <- apply(residual, 2, SSE)
# --------------------------
#  Simulación y modelación
# --------------------------
# Obtención de sumas de cuadrados corregidos en X
Sxx <- function(x){
n <- length(x) # Longitud
x_bar <- mean(x) # Media
sxx <- sum((x- x_bar)^2) # Suma de cuadrados
return(sxx) # Valor de retorno
} # Finalización función
# Obtención Sxx para cada muestra simulada
sxx_values <- apply(X, 1, Sxx) # Generación
# Véase que la suma de cuadrados corregidos es la misma siempre
sxx <- sxx_values[[1]] # Valor específico
desviacion <- sqrt(mses/sxx) # Desviación
# --------------------------
#  Intervalos de confianza
# --------------------------
# Valor crítico con alpha= 0.1 y 17 grados de libertad
valor_critico_t <- qt(0.95, df= 17) # Cálculo
radio <- valor_critico_t*desviacion # Precisión intervalo
results <- matrix(NA, nrow= 500, ncol= 2) # Matriz vacía para el almacenamiento
# Generación de los intervalos de confianza
for (i in 1:500){
lower_ci <- betas_1[i]- radio[i] # Inferior
upper_ci <- betas_1[i]+ radio[i] # Superior
results[i, ] <- c(lower_ci, upper_ci) # Asignación
} # Término del ciclo
# Contar cuántos intervalos incluyen el valor 10
inside_interval <- sum(10 >= results[, 1] & 10 <= results[, 2])
# --------------------------
#       Tabla de datos
# --------------------------
betas <- t(betas) # Transpuesta
betas_table <- rbind(head(betas, 5), c(rep(".", 2)), c(rep(".", 2)), c(rep(".", 2)), tail(betas, 5)) # Tabla información
# Aplicar formato a la tabla
betas_table |> # Tabla de datos
knitr::kable(booktabs= TRUE, caption= "Valores estimados simulados",
align= 'c') |>
kableExtra::kable_styling(full_width = TRUE,
latex_options = "HOLD_position",
font_size = 10) |>
kableExtra::column_spec(1, bold = TRUE)
# --------------------------
#    Creación histogramas
# --------------------------
ggplot(as.data.frame(betas_0), aes(betas_0)) +
geom_histogram(aes(y= after_stat(density)), fill= "lightgray",
color= "black", binwidth= 0.8) +
geom_density(color= "red", lwd= 1, fill= "red", alpha= 0.5) +
labs(title= expression(paste("Histograma de densidad ", hat(beta[0]))),
x= expression(paste("Valor estimaciones ", hat(beta[0]))),
y= "Densidad", subtitle= "En relación a las simulaciones" ) + theme_gdocs() +
theme(plot.title= element_text(color= "black", size= 15, face= "bold"),
axis.title.x= element_text(color= "black", size= 12, face= "bold"),
axis.title.y= element_text(color= "black", size= 12, face= "bold"),
plot.subtitle= element_text(color= "gray", size= 12, face= "bold.italic"),
axis.text.x= element_text(size= 8),
axis.text.y= element_text(size= 8)) +
scale_color_brewer(palette= "Dark2") + guides(size= none, alpha= none)
# --------------------------
#    Creación histogramas
# --------------------------
ggplot(as.data.frame(betas_1), aes(betas_1)) +
geom_histogram(aes(y= after_stat(density)), fill= "lightgray",
color= "black", binwidth= 0.1) +
geom_density(color= "red", lwd= 1, fill= "red", alpha= 0.5) +
labs(title= expression(paste("Histograma densidad ", hat(beta[1]))),
x= expression(paste("Valor estimaciones ", hat(beta[1]))),
y= "Densidad", subtitle= "En relación a las simulaciones" ) +
# Personalización (opcional)
theme_gdocs() +
theme(plot.title= element_text(color= "black", size= 15, face= "bold"),
axis.title.x= element_text(color= "black", size= 12, face= "bold"),
axis.title.y= element_text(color= "black", size= 12, face= "bold"),
plot.subtitle= element_text(color= "gray", size= 12, face= "bold.italic"),
axis.text.x= element_text(size= 8),
axis.text.y= element_text(size= 8)) +
scale_color_brewer(palette= "Dark2") + guides(size= none, alpha= none)
warnings()
# --------------------------
#  Personalización (opcional)
# --------------------------
# GGthemes::theme_gdocs()
correlation_plot <- correlation_plot +  theme_gdocs() +
theme(plot.title= element_text(color= "black", size= 15, face= "bold"),
axis.title.x= element_text(color= "black", size= 12, face= "bold"),
axis.title.y= element_text(color= "black", size= 12, face= "bold"),
plot.subtitle= element_text(color= "gray", size= 12, face= "bold.italic"),
axis.text.x= element_text(size= 8, angle= 90, hjust= 1),
axis.text.y= element_text(size= 8)) +
scale_color_brewer(palette= "Dark2") + guides(size= none, alpha= none)
# --------------------------
correlation_plot # Imprimir resultado
warnings()
# -----------------------------
if (!dir.exists("figs")) dir.create("figs")
if (!dir.exists("_cache")) dir.create("_cache")
# -----------------------------
knitr::opts_chunk$set(cache=TRUE,
message=FALSE, warning=FALSE,
fig.path='figs/',
cache.path = '_cache/',
fig.process = function(x) {
x2 = sub('-\\d+([.][a-z]+)$', '\\1', x)
if (file.rename(x, x2)) x2 else x
},
fig.align="center")
# --------------------------
#          Tabla
# --------------------------
intervals <- data.frame(Inferior = c(beta0_lower, beta1_lower),
Superior = c(beta0_upper, beta1_upper),
Parametro =
c(expression(beta[0]), expression(beta[1]))
# --------------------------
#          Tabla
# --------------------------
intervals <- data.frame(
Inferior = c(beta0_lower, beta1_lower),
Superior = c(beta0_upper, beta1_upper),
Parametro = c("beta[0]", "beta[1]"))
# --------------------------
#   Intervalo de confianza
# --------------------------
confint_beta0 <- confint(model, "(Intercept)", level = 0.95)
plot(data)
